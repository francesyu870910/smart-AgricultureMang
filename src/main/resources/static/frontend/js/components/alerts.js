/**
 * Êô∫ËÉΩÊ∏©ÂÆ§ÁéØÂ¢ÉÁõëÊéßÁ≥ªÁªü - Êä•Ë≠¶ÈÄöÁü•ÁªÑ‰ª∂
 */

class AlertsComponent {
    constructor() {
        this.refreshInterval = null;
        this.alerts = [];
        this.currentPage = 1;
        this.pageSize = 10;
        this.totalPages = 1;
        this.filters = {
            alertType: '',
            severity: '',
            isResolved: null
        };
        this.soundEnabled = true;
        this.notificationPermission = false;
        this.alertSound = null;
        this.lastAlertCount = 0;
    }

    async render() {
        return `
            <div class="alerts-container">
                <!-- Êä•Ë≠¶Ê¶ÇËßàÂç°Áâá -->
                <div class="grid grid-4">
                    <div class="data-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <span class="icon-alert"></span>
                                Ê¥ªË∑ÉÊä•Ë≠¶
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="data-value" id="activeAlertsCount">-</div>
                            <div class="data-label">Êú™Ëß£ÂÜ≥Êä•Ë≠?/div>
                        </div>
                    </div>
                    
                    <div class="data-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <span style="color: var(--danger-color);">üî•</span>
                                Á¥ßÊÄ•Êä•Ë≠?
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="data-value" id="criticalAlertsCount" style="color: var(--danger-color);">-</div>
                            <div class="data-label">ÈúÄË¶ÅÁ´ãÂç≥Â§ÑÁê?/div>
                        </div>
                    </div>
                    
                    <div class="data-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <span style="color: var(--warning-color);">‚ö†Ô∏è</span>
                                È´òÁ∫ßÊä•Ë≠¶
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="data-value" id="highAlertsCount" style="color: var(--warning-color);">-</div>
                            <div class="data-label">ÈúÄË¶ÅÂÖ≥Ê≥?/div>
                        </div>
                    </div>
                    
                    <div class="data-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <span>üìä</span>
                                ‰ªäÊó•Êä•Ë≠¶
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="data-value" id="todayAlertsCount">-</div>
                            <div class="data-label">‰ªäÊó•Êñ∞Â¢û</div>
                        </div>
                    </div>
                </div>

                <!-- Êä•Ë≠¶ËÆæÁΩÆÂç°Áâá -->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <span>üîß</span>
                            Êä•Ë≠¶ËÆæÁΩÆ
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="grid grid-3">
                            <div class="form-group">
                                <label class="form-label">
                                    <input type="checkbox" id="soundEnabled" checked>
                                    Â£∞Èü≥ÈÄöÁü•
                                </label>
                                <small class="form-help">Êñ∞Êä•Ë≠¶Êó∂Êí≠ÊîæÊèêÁ§∫Èü?/small>
                            </div>
                            <div class="form-group">
                                <label class="form-label">
                                    <input type="checkbox" id="browserNotification">
                                    ÊµèËßàÂô®ÈÄöÁü•
                                </label>
                                <small class="form-help">ÂÖÅËÆ∏ÊµèËßàÂô®ÂºπÁ™óÈÄöÁü•</small>
                            </div>
                            <div class="form-group">
                                <button class="btn btn-secondary btn-sm" id="testAlertBtn">
                                    ÊµãËØïÊä•Ë≠¶
                                </button>
                                <small class="form-help">ÊµãËØïÊä•Ë≠¶ÈÄöÁü•ÂäüËÉΩ</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Êä•Ë≠¶Á≠õÈÄâÂíåÊìç‰Ωú -->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <span>üìã</span>
                            Êä•Ë≠¶ÂàóË°®
                        </h3>
                        <div class="card-actions">
                            <button class="btn btn-primary btn-sm" id="refreshAlertsBtn">
                                <span class="icon-refresh"></span>
                                Âà∑Êñ∞
                            </button>
                            <button class="btn btn-secondary btn-sm" id="resolveAllBtn">
                                ÂÖ®ÈÉ®Â§ÑÁêÜ
                            </button>
                        </div>
                    </div>
                    
                    <!-- Á≠õÈÄâÊù°‰ª?-->
                    <div class="card-body">
                        <div class="grid grid-4" style="margin-bottom: 20px;">
                            <div class="form-group">
                                <label class="form-label">Êä•Ë≠¶Á±ªÂûã</label>
                                <select class="form-select" id="alertTypeFilter">
                                    <option value="">ÂÖ®ÈÉ®Á±ªÂûã</option>
                                    <option value="temperature">Ê∏©Â∫¶Êä•Ë≠¶</option>
                                    <option value="humidity">ÊπøÂ∫¶Êä•Ë≠¶</option>
                                    <option value="light">ÂÖâÁÖßÊä•Ë≠¶</option>
                                    <option value="device_error">ËÆæÂ§áÊïÖÈöú</option>
                                    <option value="system_error">Á≥ªÁªüÈîôËØØ</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">‰∏•ÈáçÁ®ãÂ∫¶</label>
                                <select class="form-select" id="severityFilter">
                                    <option value="">ÂÖ®ÈÉ®Á∫ßÂà´</option>
                                    <option value="critical">Á¥ßÊÄ?/option>
                                    <option value="high">È´?/option>
                                    <option value="medium">‰∏?/option>
                                    <option value="low">‰Ω?/option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Â§ÑÁêÜÁä∂ÊÄ?/label>
                                <select class="form-select" id="statusFilter">
                                    <option value="">ÂÖ®ÈÉ®Áä∂ÊÄ?/option>
                                    <option value="false">Êú™Â§ÑÁê?/option>
                                    <option value="true">Â∑≤Â§ÑÁê?/option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">&nbsp;</label>
                                <button class="btn btn-primary" id="applyFiltersBtn" style="width: 100%;">
                                    Â∫îÁî®Á≠õÈÄ?
                                </button>
                            </div>
                        </div>

                        <!-- Êä•Ë≠¶ÂàóË°® -->
                        <div id="alertsList">
                            <div class="loading">
                                <div class="loading-spinner"></div>
                                <p>Ê≠£Âú®Âä†ËΩΩÊä•Ë≠¶Êï∞ÊçÆ...</p>
                            </div>
                        </div>

                        <!-- ÂàÜÈ°µÊéß‰ª∂ -->
                        <div class="pagination" id="alertsPagination" style="display: none;">
                            <button id="prevPageBtn" disabled>‰∏ä‰∏ÄÈ°?/button>
                            <span id="pageInfo">Á¨?1 È°µÔºåÂÖ?1 È°?/span>
                            <button id="nextPageBtn" disabled>‰∏ã‰∏ÄÈ°?/button>
                        </div>
                    </div>
                </div>

                <!-- Êä•Ë≠¶ÂéÜÂè≤ÁªüËÆ° -->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <span>üìà</span>
                            Êä•Ë≠¶ÁªüËÆ°
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="grid grid-2">
                            <div id="alertTypeChart">
                                <h4>Êä•Ë≠¶Á±ªÂûãÂàÜÂ∏É</h4>
                                <div id="typeChartContainer" style="height: 200px;">
                                    <div class="loading">
                                        <div class="loading-spinner"></div>
                                        <p>Ê≠£Âú®Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆ...</p>
                                    </div>
                                </div>
                            </div>
                            <div id="alertSeverityChart">
                                <h4>‰∏•ÈáçÁ®ãÂ∫¶ÂàÜÂ∏É</h4>
                                <div id="severityChartContainer" style="height: 200px;">
                                    <div class="loading">
                                        <div class="loading-spinner"></div>
                                        <p>Ê≠£Âú®Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆ...</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Êä•Ë≠¶ËØ¶ÊÉÖÊ®°ÊÄÅÊ°Ü -->
            <div class="modal" id="alertDetailModal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Êä•Ë≠¶ËØ¶ÊÉÖ</h3>
                        <button class="modal-close">&times;</button>
                    </div>
                    <div class="modal-body" id="alertDetailContent">
                        <!-- Âä®ÊÄÅÂÜÖÂÆ?-->
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" id="closeDetailBtn">ÂÖ≥Èó≠</button>
                        <button class="btn btn-primary" id="resolveDetailBtn">Â§ÑÁêÜÊä•Ë≠¶</button>
                    </div>
                </div>
            </div>
        `;
    }

    async init() {
        console.log('Êä•Ë≠¶ÈÄöÁü•ÁªÑ‰ª∂Â∑≤ÂàùÂßãÂåñ');
        
        // ÂàùÂßãÂåñÈü≥È¢?
        this.initAlertSound();
        
        // ËØ∑Ê±ÇÊµèËßàÂô®ÈÄöÁü•ÊùÉÈôê
        await this.requestNotificationPermission();
        
        // ÁªëÂÆö‰∫ã‰ª∂
        this.bindEvents();
        
        // Âä†ËΩΩÂàùÂßãÊï∞ÊçÆ
        await this.loadAlertCounts();
        await this.loadAlerts();
        await this.loadStatistics();
        
        // ÂºÄÂßãÂÆöÊó∂Âà∑Êñ?
        this.startAutoRefresh();
    }

    /**
     * ÂàùÂßãÂåñÊä•Ë≠¶Èü≥È¢?
     */
    initAlertSound() {
        try {
            // ÂàõÂª∫Èü≥È¢ë‰∏ä‰∏ãÊñáÂíåÈü≥È¢ë
            this.alertSound = new Audio();
            this.alertSound.preload = 'auto';
            
            // ‰ΩøÁî®Êï∞ÊçÆURLÂàõÂª∫ÁÆÄÂçïÁöÑÊèêÁ§∫Èü?
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            // ÂàõÂª∫ÁÆÄÂçïÁöÑÊèêÁ§∫Èü≥È¢ëÊï∞ÊçÆ
            const sampleRate = audioContext.sampleRate;
            const duration = 0.5; // 0.5Áß?
            const buffer = audioContext.createBuffer(1, sampleRate * duration, sampleRate);
            const data = buffer.getChannelData(0);
            
            for (let i = 0; i < data.length; i++) {
                const t = i / sampleRate;
                data[i] = Math.sin(2 * Math.PI * 800 * t) * Math.exp(-t * 3);
            }
            
            // Â∞ÜÈü≥È¢ëÊï∞ÊçÆËΩ¨Êç¢‰∏∫blob URL
            const source = audioContext.createBufferSource();
            source.buffer = buffer;
            
            console.log('Êä•Ë≠¶Èü≥È¢ëÂàùÂßãÂåñÊàêÂä?);
        } catch (error) {
            console.warn('Êä•Ë≠¶Èü≥È¢ëÂàùÂßãÂåñÂ§±Ë¥?', error);
        }
    }

    /**
     * Êí≠ÊîæÊä•Ë≠¶Â£∞Èü≥
     */
    playAlertSound() {
        if (!this.soundEnabled) return;
        
        try {
            // ‰ΩøÁî®Web Audio APIÂàõÂª∫ÁÆÄÂçïÁöÑÊèêÁ§∫Èü?
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
            oscillator.frequency.setValueAtTime(1000, audioContext.currentTime + 0.1);
            oscillator.frequency.setValueAtTime(800, audioContext.currentTime + 0.2);
            
            gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.5);
            
            console.log('Êí≠ÊîæÊä•Ë≠¶Â£∞Èü≥');
        } catch (error) {
            console.warn('Êí≠ÊîæÊä•Ë≠¶Â£∞Èü≥Â§±Ë¥•:', error);
        }
    }

    /**
     * ËØ∑Ê±ÇÊµèËßàÂô®ÈÄöÁü•ÊùÉÈôê
     */
    async requestNotificationPermission() {
        if ('Notification' in window) {
            const permission = await Notification.requestPermission();
            this.notificationPermission = permission === 'granted';
            
            const checkbox = document.getElementById('browserNotification');
            if (checkbox) {
                checkbox.checked = this.notificationPermission;
                checkbox.disabled = !('Notification' in window);
            }
        }
    }

    /**
     * ÊòæÁ§∫ÊµèËßàÂô®ÈÄöÁü•
     */
    showBrowserNotification(alert) {
        if (!this.notificationPermission) return;
        
        const title = `${this.getSeverityText(alert.severity)}Êä•Ë≠¶`;
        const options = {
            body: alert.message,
            icon: '/favicon.ico',
            tag: `alert-${alert.id}`,
            requireInteraction: alert.severity === 'critical'
        };
        
        const notification = new Notification(title, options);
        
        notification.onclick = () => {
            window.focus();
            this.showAlertDetail(alert);
            notification.close();
        };
        
        // Ëá™Âä®ÂÖ≥Èó≠ÈÄöÁü•
        setTimeout(() => {
            notification.close();
        }, 5000);
    }

    /**
     * ÁªëÂÆö‰∫ã‰ª∂
     */
    bindEvents() {
        // ËÆæÁΩÆÈÄâÈ°π
        const soundCheckbox = document.getElementById('soundEnabled');
        if (soundCheckbox) {
            soundCheckbox.addEventListener('change', (e) => {
                this.soundEnabled = e.target.checked;
            });
        }

        const notificationCheckbox = document.getElementById('browserNotification');
        if (notificationCheckbox) {
            notificationCheckbox.addEventListener('change', async (e) => {
                if (e.target.checked && !this.notificationPermission) {
                    await this.requestNotificationPermission();
                    e.target.checked = this.notificationPermission;
                }
            });
        }

        // ÊµãËØïÊä•Ë≠¶ÊåâÈíÆ
        const testBtn = document.getElementById('testAlertBtn');
        if (testBtn) {
            testBtn.addEventListener('click', () => {
                this.testAlert();
            });
        }

        // Âà∑Êñ∞ÊåâÈíÆ
        const refreshBtn = document.getElementById('refreshAlertsBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.refresh();
            });
        }

        // ÂÖ®ÈÉ®Â§ÑÁêÜÊåâÈíÆ
        const resolveAllBtn = document.getElementById('resolveAllBtn');
        if (resolveAllBtn) {
            resolveAllBtn.addEventListener('click', () => {
                this.resolveAllAlerts();
            });
        }

        // Á≠õÈÄâÊåâÈí?
        const applyFiltersBtn = document.getElementById('applyFiltersBtn');
        if (applyFiltersBtn) {
            applyFiltersBtn.addEventListener('click', () => {
                this.applyFilters();
            });
        }

        // ÂàÜÈ°µÊåâÈíÆ
        const prevBtn = document.getElementById('prevPageBtn');
        const nextBtn = document.getElementById('nextPageBtn');
        if (prevBtn) {
            prevBtn.addEventListener('click', () => {
                if (this.currentPage > 1) {
                    this.currentPage--;
                    this.loadAlerts();
                }
            });
        }
        if (nextBtn) {
            nextBtn.addEventListener('click', () => {
                if (this.currentPage < this.totalPages) {
                    this.currentPage++;
                    this.loadAlerts();
                }
            });
        }

        // Ê®°ÊÄÅÊ°Ü‰∫ã‰ª∂
        const modal = document.getElementById('alertDetailModal');
        const closeBtn = document.getElementById('closeDetailBtn');
        const resolveBtn = document.getElementById('resolveDetailBtn');
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                modal.style.display = 'none';
            });
        }
        
        if (resolveBtn) {
            resolveBtn.addEventListener('click', () => {
                const alertId = resolveBtn.dataset.alertId;
                if (alertId) {
                    this.resolveAlert(parseInt(alertId));
                    modal.style.display = 'none';
                }
            });
        }
    }

    /**
     * Âä†ËΩΩÊä•Ë≠¶ÁªüËÆ°Êï∞ÊçÆ
     */
    async loadAlertCounts() {
        try {
            const [activeCount, criticalCount, highCount, todayCount] = await Promise.all([
                apiService.get('/alerts/count/unresolved'),
                apiService.get('/alerts/count/unresolved/critical'),
                apiService.get('/alerts/count/unresolved/high'),
                apiService.get('/alerts/count/today')
            ]);

            document.getElementById('activeAlertsCount').textContent = activeCount.data || 0;
            document.getElementById('criticalAlertsCount').textContent = criticalCount.data || 0;
            document.getElementById('highAlertsCount').textContent = highCount.data || 0;
            document.getElementById('todayAlertsCount').textContent = todayCount.data || 0;

            // Ê£ÄÊü•ÊòØÂê¶ÊúâÊñ∞Êä•Ë≠?
            const currentActiveCount = activeCount.data || 0;
            if (this.lastAlertCount > 0 && currentActiveCount > this.lastAlertCount) {
                this.playAlertSound();
                notificationUtils.warning(`Ê£ÄÊµãÂà∞ ${currentActiveCount - this.lastAlertCount} ‰∏™Êñ∞Êä•Ë≠¶`, 'Êä•Ë≠¶ÈÄöÁü•');
            }
            this.lastAlertCount = currentActiveCount;

        } catch (error) {
            console.error('Âä†ËΩΩÊä•Ë≠¶ÁªüËÆ°Â§±Ë¥•:', error);
            // ÊòæÁ§∫Ê®°ÊãüÊï∞ÊçÆ
            document.getElementById('activeAlertsCount').textContent = '2';
            document.getElementById('criticalAlertsCount').textContent = '1';
            document.getElementById('highAlertsCount').textContent = '1';
            document.getElementById('todayAlertsCount').textContent = '3';
        }
    }

    /**
     * Âä†ËΩΩÊä•Ë≠¶ÂàóË°®
     */
    async loadAlerts() {
        try {
            const params = {
                current: this.currentPage,
                size: this.pageSize,
                ...this.filters
            };

            const response = await apiService.get('/alerts/page', params);
            
            if (response.success && response.data) {
                this.alerts = response.data.records || [];
                this.totalPages = Math.ceil((response.data.total || 0) / this.pageSize);
                this.renderAlertsList();
                this.updatePagination();
            } else {
                throw new Error('Ëé∑ÂèñÊä•Ë≠¶Êï∞ÊçÆÂ§±Ë¥•');
            }
        } catch (error) {
            console.error('Âä†ËΩΩÊä•Ë≠¶ÂàóË°®Â§±Ë¥•:', error);
            // ÊòæÁ§∫Ê®°ÊãüÊï∞ÊçÆ
            this.alerts = this.generateMockAlerts();
            this.renderAlertsList();
        }
    }

    /**
     * Ê∏≤ÊüìÊä•Ë≠¶ÂàóË°®
     */
    renderAlertsList() {
        const container = document.getElementById('alertsList');
        
        if (this.alerts.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">‚ú?/div>
                    <div class="empty-state-title">ÊöÇÊó†Êä•Ë≠¶</div>
                    <div class="empty-state-description">Á≥ªÁªüËøêË°åÊ≠£Â∏∏ÔºåÊ≤°ÊúâÈúÄË¶ÅÂ§ÑÁêÜÁöÑÊä•Ë≠¶</div>
                </div>
            `;
            return;
        }

        const alertsHtml = this.alerts.map(alert => `
            <div class="alert-item ${alert.isResolved ? 'resolved' : 'active'}" data-alert-id="${alert.id}">
                <div class="alert-header">
                    <div class="alert-severity ${alert.severity}">
                        ${this.getSeverityIcon(alert.severity)}
                        ${this.getSeverityText(alert.severity)}
                    </div>
                    <div class="alert-type">
                        ${this.getTypeText(alert.alertType)}
                    </div>
                    <div class="alert-time">
                        ${FormatUtils.formatDateTime(alert.createdAt)}
                    </div>
                </div>
                <div class="alert-message">
                    ${alert.message}
                </div>
                <div class="alert-actions">
                    <button class="btn btn-sm btn-secondary" data-alert-id="${alert.id}" onclick="alertsComponent.showAlertDetailById(${alert.id})">
                        ËØ¶ÊÉÖ
                    </button>
                    ${!alert.isResolved ? `
                        <button class="btn btn-sm btn-primary" onclick="alertsComponent.resolveAlert(${alert.id})">
                            Â§ÑÁêÜ
                        </button>
                    ` : `
                        <span class="tag tag-success">Â∑≤Â§ÑÁê?/span>
                    `}
                </div>
            </div>
        `).join('');

        container.innerHTML = alertsHtml;
    }

    /**
     * Êõ¥Êñ∞ÂàÜÈ°µÊéß‰ª∂
     */
    updatePagination() {
        const pagination = document.getElementById('alertsPagination');
        const prevBtn = document.getElementById('prevPageBtn');
        const nextBtn = document.getElementById('nextPageBtn');
        const pageInfo = document.getElementById('pageInfo');

        if (this.totalPages <= 1) {
            pagination.style.display = 'none';
            return;
        }

        pagination.style.display = 'flex';
        prevBtn.disabled = this.currentPage <= 1;
        nextBtn.disabled = this.currentPage >= this.totalPages;
        pageInfo.textContent = `Á¨?${this.currentPage} È°µÔºåÂÖ?${this.totalPages} È°µ`;
    }

    /**
     * Â∫îÁî®Á≠õÈÄâÊù°‰ª?
     */
    applyFilters() {
        this.filters.alertType = document.getElementById('alertTypeFilter').value;
        this.filters.severity = document.getElementById('severityFilter').value;
        const statusValue = document.getElementById('statusFilter').value;
        this.filters.isResolved = statusValue === '' ? null : statusValue === 'true';
        
        this.currentPage = 1;
        this.loadAlerts();
    }

    /**
     * Â§ÑÁêÜÂçï‰∏™Êä•Ë≠¶
     */
    async resolveAlert(alertId) {
        try {
            const response = await apiService.post(`/alerts/${alertId}/resolve`);
            
            if (response.success) {
                notificationUtils.success('Êä•Ë≠¶Â§ÑÁêÜÊàêÂäü');
                await this.refresh();
            } else {
                throw new Error(response.message || 'Â§ÑÁêÜÂ§±Ë¥•');
            }
        } catch (error) {
            console.error('Â§ÑÁêÜÊä•Ë≠¶Â§±Ë¥•:', error);
            notificationUtils.error('Â§ÑÁêÜÊä•Ë≠¶Â§±Ë¥•: ' + error.message);
        }
    }

    /**
     * Â§ÑÁêÜÊâÄÊúâÊú™Ëß£ÂÜ≥Êä•Ë≠¶
     */
    async resolveAllAlerts() {
        const unresolvedAlerts = this.alerts.filter(alert => !alert.isResolved);
        
        if (unresolvedAlerts.length === 0) {
            notificationUtils.info('Ê≤°ÊúâÈúÄË¶ÅÂ§ÑÁêÜÁöÑÊä•Ë≠¶');
            return;
        }

        const confirmed = await new Promise(resolve => {
            notificationUtils.showConfirm(
                `Á°ÆÂÆöË¶ÅÂ§ÑÁêÜÊâÄÊú?${unresolvedAlerts.length} ‰∏™Êú™Ëß£ÂÜ≥ÁöÑÊä•Ë≠¶ÂêóÔºü`,
                () => resolve(true),
                () => resolve(false)
            );
        });

        if (!confirmed) return;

        try {
            const alertIds = unresolvedAlerts.map(alert => alert.id);
            const response = await apiService.post('/alerts/batch-resolve', alertIds);
            
            if (response.success) {
                notificationUtils.success(`ÊàêÂäüÂ§ÑÁêÜ ${alertIds.length} ‰∏™Êä•Ë≠¶`);
                await this.refresh();
            } else {
                throw new Error(response.message || 'ÊâπÈáèÂ§ÑÁêÜÂ§±Ë¥•');
            }
        } catch (error) {
            console.error('ÊâπÈáèÂ§ÑÁêÜÊä•Ë≠¶Â§±Ë¥•:', error);
            notificationUtils.error('ÊâπÈáèÂ§ÑÁêÜÊä•Ë≠¶Â§±Ë¥•: ' + error.message);
        }
    }

    /**
     * Ê†πÊçÆIDÊòæÁ§∫Êä•Ë≠¶ËØ¶ÊÉÖ
     */
    showAlertDetailById(alertId) {
        const alert = this.alerts.find(a => a.id === alertId);
        if (alert) {
            this.showAlertDetail(alert);
        }
    }

    /**
     * ÊòæÁ§∫Êä•Ë≠¶ËØ¶ÊÉÖ
     */
    showAlertDetail(alert) {
        const modal = document.getElementById('alertDetailModal');
        const content = document.getElementById('alertDetailContent');
        const resolveBtn = document.getElementById('resolveDetailBtn');

        content.innerHTML = `
            <div class="alert-detail">
                <div class="detail-row">
                    <label>Êä•Ë≠¶ID:</label>
                    <span>${alert.id}</span>
                </div>
                <div class="detail-row">
                    <label>Êä•Ë≠¶Á±ªÂûã:</label>
                    <span>${this.getTypeText(alert.alertType)}</span>
                </div>
                <div class="detail-row">
                    <label>‰∏•ÈáçÁ®ãÂ∫¶:</label>
                    <span class="tag tag-${alert.severity}">${this.getSeverityText(alert.severity)}</span>
                </div>
                <div class="detail-row">
                    <label>Êä•Ë≠¶Ê∂àÊÅØ:</label>
                    <span>${alert.message}</span>
                </div>
                <div class="detail-row">
                    <label>ÂèÇÊï∞ÂÄ?</label>
                    <span>${alert.parameterValue || '-'}</span>
                </div>
                <div class="detail-row">
                    <label>ÈòàÂÄ?</label>
                    <span>${alert.thresholdValue || '-'}</span>
                </div>
                <div class="detail-row">
                    <label>ËÆæÂ§áID:</label>
                    <span>${alert.deviceId || '-'}</span>
                </div>
                <div class="detail-row">
                    <label>ÂàõÂª∫Êó∂Èó¥:</label>
                    <span>${FormatUtils.formatDateTime(alert.createdAt)}</span>
                </div>
                <div class="detail-row">
                    <label>Â§ÑÁêÜÁä∂ÊÄ?</label>
                    <span class="tag ${alert.isResolved ? 'tag-success' : 'tag-warning'}">
                        ${alert.isResolved ? 'Â∑≤Â§ÑÁê? : 'Êú™Â§ÑÁê?}
                    </span>
                </div>
                ${alert.resolvedAt ? `
                    <div class="detail-row">
                        <label>Â§ÑÁêÜÊó∂Èó¥:</label>
                        <span>${FormatUtils.formatDateTime(alert.resolvedAt)}</span>
                    </div>
                ` : ''}
            </div>
        `;

        resolveBtn.style.display = alert.isResolved ? 'none' : 'inline-block';
        resolveBtn.dataset.alertId = alert.id;

        modal.style.display = 'flex';
    }

    /**
     * Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆ
     */
    async loadStatistics() {
        try {
            const [typeStats, severityStats] = await Promise.all([
                apiService.get('/alerts/statistics/type'),
                apiService.get('/alerts/statistics/severity')
            ]);

            this.renderTypeChart(typeStats.data || []);
            this.renderSeverityChart(severityStats.data || []);
        } catch (error) {
            console.error('Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆÂ§±Ë¥•:', error);
            // ÊòæÁ§∫Ê®°ÊãüÊï∞ÊçÆ
            this.renderTypeChart(this.generateMockTypeStats());
            this.renderSeverityChart(this.generateMockSeverityStats());
        }
    }

    /**
     * Ê∏≤ÊüìÊä•Ë≠¶Á±ªÂûãÁªüËÆ°ÂõæË°®
     */
    renderTypeChart(data) {
        const container = document.getElementById('typeChartContainer');
        
        if (data.length === 0) {
            container.innerHTML = '<div class="empty-state"><p>ÊöÇÊó†Êï∞ÊçÆ</p></div>';
            return;
        }

        const total = data.reduce((sum, item) => sum + item.count, 0);
        
        const chartHtml = data.map(item => {
            const percentage = ((item.count / total) * 100).toFixed(1);
            return `
                <div class="chart-bar">
                    <div class="bar-label">${this.getTypeText(item.alertType)}</div>
                    <div class="bar-container">
                        <div class="bar-fill" style="width: ${percentage}%"></div>
                        <div class="bar-value">${item.count} (${percentage}%)</div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = `<div class="bar-chart">${chartHtml}</div>`;
    }

    /**
     * Ê∏≤Êüì‰∏•ÈáçÁ®ãÂ∫¶ÁªüËÆ°ÂõæË°®
     */
    renderSeverityChart(data) {
        const container = document.getElementById('severityChartContainer');
        
        if (data.length === 0) {
            container.innerHTML = '<div class="empty-state"><p>ÊöÇÊó†Êï∞ÊçÆ</p></div>';
            return;
        }

        const total = data.reduce((sum, item) => sum + item.count, 0);
        
        const chartHtml = data.map(item => {
            const percentage = ((item.count / total) * 100).toFixed(1);
            return `
                <div class="chart-bar">
                    <div class="bar-label">${this.getSeverityText(item.severity)}</div>
                    <div class="bar-container">
                        <div class="bar-fill severity-${item.severity}" style="width: ${percentage}%"></div>
                        <div class="bar-value">${item.count} (${percentage}%)</div>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = `<div class="bar-chart">${chartHtml}</div>`;
    }

    /**
     * ÊµãËØïÊä•Ë≠¶ÂäüËÉΩ
     */
    testAlert() {
        const testAlert = {
            id: 999,
            alertType: 'system_error',
            severity: 'medium',
            message: 'ËøôÊòØ‰∏Ä‰∏™ÊµãËØïÊä•Ë≠¶ÔºåÁî®‰∫éÈ™åËØÅÊä•Ë≠¶ÈÄöÁü•ÂäüËÉΩÊòØÂê¶Ê≠£Â∏∏Â∑•‰Ωú',
            isResolved: false,
            createdAt: new Date().toISOString()
        };

        this.playAlertSound();
        this.showBrowserNotification(testAlert);
        notificationUtils.warning('ÊµãËØïÊä•Ë≠¶Â∑≤Ëß¶Âè?, 'Êä•Ë≠¶ÊµãËØï');
    }

    /**
     * ÂºÄÂßãËá™Âä®Âà∑Êñ?
     */
    startAutoRefresh() {
        this.refreshInterval = setInterval(() => {
            this.loadAlertCounts();
            this.loadAlerts();
        }, 30000); // 30ÁßíÂà∑Êñ∞‰∏ÄÊ¨?
    }

    /**
     * Âà∑Êñ∞ÊâÄÊúâÊï∞Êç?
     */
    async refresh() {
        console.log('Âà∑Êñ∞Êä•Ë≠¶Êï∞ÊçÆ');
        await Promise.all([
            this.loadAlertCounts(),
            this.loadAlerts(),
            this.loadStatistics()
        ]);
        notificationUtils.success('Êä•Ë≠¶Êï∞ÊçÆÂ∑≤Âà∑Êñ?);
    }

    /**
     * Ëé∑Âèñ‰∏•ÈáçÁ®ãÂ∫¶ÊñáÊú¨
     */
    getSeverityText(severity) {
        const texts = {
            low: '‰Ω?,
            medium: '‰∏?,
            high: 'È´?,
            critical: 'Á¥ßÊÄ?
        };
        return texts[severity] || severity;
    }

    /**
     * Ëé∑Âèñ‰∏•ÈáçÁ®ãÂ∫¶ÂõæÊ†á
     */
    getSeverityIcon(severity) {
        const icons = {
            low: 'üîµ',
            medium: 'üü°',
            high: 'üü†',
            critical: 'üî¥'
        };
        return icons[severity] || '‚ö?;
    }

    /**
     * Ëé∑ÂèñÊä•Ë≠¶Á±ªÂûãÊñáÊú¨
     */
    getTypeText(alertType) {
        const texts = {
            temperature: 'Ê∏©Â∫¶Êä•Ë≠¶',
            humidity: 'ÊπøÂ∫¶Êä•Ë≠¶',
            light: 'ÂÖâÁÖßÊä•Ë≠¶',
            device_error: 'ËÆæÂ§áÊïÖÈöú',
            system_error: 'Á≥ªÁªüÈîôËØØ'
        };
        return texts[alertType] || alertType;
    }

    /**
     * ÁîüÊàêÊ®°ÊãüÊä•Ë≠¶Êï∞ÊçÆ
     */
    generateMockAlerts() {
        return [
            {
                id: 1,
                alertType: 'temperature',
                severity: 'high',
                message: 'Ê∏©Â∫¶ËøáÈ´òÔºåÂΩìÂâçÊ∏©Â∫?2.5¬∞CÔºåË∂ÖÂá∫ÈòàÂÄ?0¬∞C',
                parameterValue: 32.5,
                thresholdValue: 30.0,
                isResolved: false,
                createdAt: new Date(Date.now() - 300000).toISOString()
            },
            {
                id: 2,
                alertType: 'device_error',
                severity: 'medium',
                message: 'ÁÅåÊ∫âÁ≥ªÁªü1Á¶ªÁ∫ø',
                deviceId: 'irrigation_01',
                isResolved: false,
                createdAt: new Date(Date.now() - 600000).toISOString()
            },
            {
                id: 3,
                alertType: 'humidity',
                severity: 'low',
                message: 'ÊπøÂ∫¶ÂÅè‰ΩéÔºåÂΩìÂâçÊπøÂ∫?5%ÔºåÂª∫ËÆÆÂÄ?0-60%',
                parameterValue: 35,
                thresholdValue: 40,
                isResolved: true,
                createdAt: new Date(Date.now() - 900000).toISOString(),
                resolvedAt: new Date(Date.now() - 300000).toISOString()
            }
        ];
    }

    /**
     * ÁîüÊàêÊ®°ÊãüÁ±ªÂûãÁªüËÆ°Êï∞ÊçÆ
     */
    generateMockTypeStats() {
        return [
            { alertType: 'temperature', count: 15 },
            { alertType: 'humidity', count: 8 },
            { alertType: 'device_error', count: 5 },
            { alertType: 'light', count: 3 },
            { alertType: 'system_error', count: 2 }
        ];
    }

    /**
     * ÁîüÊàêÊ®°Êãü‰∏•ÈáçÁ®ãÂ∫¶ÁªüËÆ°Êï∞ÊçÆ
     */
    generateMockSeverityStats() {
        return [
            { severity: 'critical', count: 2 },
            { severity: 'high', count: 8 },
            { severity: 'medium', count: 15 },
            { severity: 'low', count: 8 }
        ];
    }

    destroy() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
        }
    }
}

// ÂàõÂª∫ÂÖ®Â±ÄÂÆû‰æã
const alertsComponent = new AlertsComponent();

