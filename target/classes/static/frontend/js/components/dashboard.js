                         <div class="data-value" id="currentTemperature">
                                    --¬∞C
                                </div>
                                <div class="data-status" id="temperatureStatus">Ê≠£Â∏∏</div>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" id="temperatureProgress" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>

                    <div class="data-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="icon-humidity"></i>
                                Á©∫Ê∞îÊπøÂ∫¶
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="data-display">
                                <div class="data-value" id="currentHumidity">
                                    --%
                                </div>
                                <div class="data-status" id="humidityStatus">Ê≠£Â∏∏</div>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" id="humidityProgress" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>

                    <div class="data-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="icon-light"></i>
                                ÂÖâÁÖßÂº∫Â∫¶
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="data-display">
                                <div class="data-value" id="currentLight">
                                    -- lux
                                </div>
                                <div class="data-status" id="lightStatus">Ê≠£Â∏∏</div>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill" id="lightProgress" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>

                    <div class="data-card">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="icon-alert"></i>
                                Ê¥ªË∑ÉÊä•Ë≠¶
                            </h3>
                        </div>
                        <div class="card-body">
                            <div class="data-display">
                                <div class="data-value" id="activeAlerts">
                                    0
                                </div>
                                <div class="data-status" id="alertsStatus">Ê≠£Â∏∏</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- ËÆæÂ§áÁä∂ÊÄÅÊ¶ÇËß?-->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="icon-control"></i>
                            ËÆæÂ§áÁä∂ÊÄÅÊ¶ÇËß?
                        </h3>
                        <div class="card-actions">
                            <button class="btn btn-primary" onclick="app.loadModule('control')">
                                ËÆæÂ§áÊéßÂà∂
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="grid grid-2" id="deviceOverview">
                            <!-- ËÆæÂ§áÁä∂ÊÄÅÂ∞ÜÂú®ËøôÈáåÂä®ÊÄÅÂä†ËΩ?-->
                        </div>
                    </div>
                </div>

                <!-- ÁéØÂ¢ÉË∂ãÂäøÂõæË°® -->
                <div class="grid grid-2">
                    <div class="chart-container">
                        <div class="chart-header">
                            <h3 class="chart-title">24Â∞èÊó∂Ê∏©Â∫¶Ë∂ãÂäø</h3>
                            <div class="chart-controls">
                                <div class="chart-period">
                                    <button class="period-btn active" data-period="24h">24Â∞èÊó∂</button>
                                    <button class="period-btn" data-period="7d">7Â§?/button>
                                    <button class="period-btn" data-period="30d">30Â§?/button>
                                </div>
                            </div>
                        </div>
                        <div class="line-chart">
                            <canvas id="temperatureChart" class="chart-canvas"></canvas>
                        </div>
                    </div>

                    <div class="chart-container">
                        <div class="chart-header">
                            <h3 class="chart-title">24Â∞èÊó∂ÊπøÂ∫¶Ë∂ãÂäø</h3>
                            <div class="chart-controls">
                                <div class="chart-period">
                                    <button class="period-btn active" data-period="24h">24Â∞èÊó∂</button>
                                    <button class="period-btn" data-period="7d">7Â§?/button>
                                    <button class="period-btn" data-period="30d">30Â§?/button>
                                </div>
                            </div>
                        </div>
                        <div class="line-chart">
                            <canvas id="humidityChart" class="chart-canvas"></canvas>
                        </div>
                    </div>
                </div>

                <!-- ÊúÄËøëÊä•Ë≠?-->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="icon-alert"></i>
                            ÊúÄËøëÊä•Ë≠?
                        </h3>
                        <div class="card-actions">
                            <button class="btn btn-primary" onclick="app.loadModule('alerts')">
                                Êü•ÁúãÂÖ®ÈÉ®
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="recentAlerts">
                            <!-- ÊúÄËøëÊä•Ë≠¶Â∞ÜÂú®ËøôÈáåÂä®ÊÄÅÂä†ËΩ?-->
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * ÂàùÂßãÂåñÁªÑ‰ª?
     */
    async init() {
        await this.loadData();
        this.bindEvents();
        this.startAutoRefresh();
    }

    /**
     * Âä†ËΩΩÊï∞ÊçÆ
     */
    async loadData() {
        try {
            // Âä†ËΩΩÁéØÂ¢ÉÊï∞ÊçÆ
            await this.loadEnvironmentData();
            
            // Âä†ËΩΩËÆæÂ§áÁä∂ÊÄ?
            await this.loadDeviceStatus();
            
            // Âä†ËΩΩÊä•Ë≠¶‰ø°ÊÅØ
            await this.loadAlerts();
            
            // Âä†ËΩΩÂõæË°®Êï∞ÊçÆ
            await this.loadChartData();
            
        } catch (error) {
            console.error('Âä†ËΩΩ‰ª™Ë°®ÁõòÊï∞ÊçÆÂ§±Ë¥?', error);
            app.showToast('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•', 'error');
        }
    }

    /**
     * Âä†ËΩΩÁéØÂ¢ÉÊï∞ÊçÆ
     */
    async loadEnvironmentData() {
        try {
            // ‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆÔºåÂÆûÈôÖÈ°πÁõÆ‰∏≠Â∫îË∞ÉÁî®ÁúüÂÆûAPI
            const response = apiService.generateMockEnvironmentData();
            const data = response.data;

            // Êõ¥Êñ∞Ê∏©Â∫¶ÊòæÁ§∫
            document.getElementById('currentTemperature').textContent = 
                FormatUtils.formatTemperature(data.temperature);
            this.updateProgressBar('temperatureProgress', data.temperature, 15, 35);
            this.updateStatus('temperatureStatus', data.temperature, 15, 35);

            // Êõ¥Êñ∞ÊπøÂ∫¶ÊòæÁ§∫
            document.getElementById('currentHumidity').textContent = 
                FormatUtils.formatHumidity(data.humidity);
            this.updateProgressBar('humidityProgress', data.humidity, 30, 80);
            this.updateStatus('humidityStatus', data.humidity, 30, 80);

            // Êõ¥Êñ∞ÂÖâÁÖßÊòæÁ§∫
            document.getElementById('currentLight').textContent = 
                FormatUtils.formatLightIntensity(data.lightIntensity);
            this.updateProgressBar('lightProgress', data.lightIntensity, 500, 3000);
            this.updateStatus('lightStatus', data.lightIntensity, 500, 3000);

        } catch (error) {
            console.error('Âä†ËΩΩÁéØÂ¢ÉÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    /**
     * Âä†ËΩΩËÆæÂ§áÁä∂ÊÄ?
     */
    async loadDeviceStatus() {
        try {
            const response = apiService.generateMockDevices();
            const devices = response.data;

            const deviceOverview = document.getElementById('deviceOverview');
            deviceOverview.innerHTML = devices.map(device => {
                const statusInfo = FormatUtils.formatDeviceStatus(device.status);
                const deviceTypeText = FormatUtils.formatDeviceType(device.type);
                
                return `
                    <div class="device-control">
                        <div class="device-info">
                            <div class="device-icon ${device.status}">
                                ${this.getDeviceIcon(device.type)}
                            </div>
                            <div class="device-details">
                                <h4>${device.name}</h4>
                                <p>${deviceTypeText} - ${statusInfo.text}</p>
                            </div>
                        </div>
                        <div class="device-controls">
                            <div class="data-status ${statusInfo.class}">
                                ${device.isRunning ? 'ËøêË°å‰∏? : 'Â∑≤ÂÅúÊ≠?}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');

        } catch (error) {
            console.error('Âä†ËΩΩËÆæÂ§áÁä∂ÊÄÅÂ§±Ë¥?', error);
        }
    }

    /**
     * Âä†ËΩΩÊä•Ë≠¶‰ø°ÊÅØ
     */
    async loadAlerts() {
        try {
            const response = apiService.generateMockAlerts();
            const alerts = response.data;

            // Êõ¥Êñ∞Ê¥ªË∑ÉÊä•Ë≠¶Êï∞Èáè
            const activeAlerts = alerts.filter(alert => !alert.isResolved);
            document.getElementById('activeAlerts').textContent = activeAlerts.length;
            
            const alertsStatus = document.getElementById('alertsStatus');
            if (activeAlerts.length === 0) {
                alertsStatus.textContent = 'Ê≠£Â∏∏';
                alertsStatus.className = 'data-status status-normal';
            } else {
                alertsStatus.textContent = 'ÊúâÊä•Ë≠?;
                alertsStatus.className = 'data-status status-danger';
            }

            // ÊòæÁ§∫ÊúÄËøëÊä•Ë≠?
            const recentAlerts = document.getElementById('recentAlerts');
            if (alerts.length === 0) {
                recentAlerts.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">‚ú?/div>
                        <div class="empty-state-title">ÊöÇÊó†Êä•Ë≠¶</div>
                        <div class="empty-state-description">Á≥ªÁªüËøêË°åÊ≠£Â∏∏</div>
                    </div>
                `;
            } else {
                recentAlerts.innerHTML = alerts.slice(0, 3).map(alert => {
                    const severityInfo = FormatUtils.formatAlertSeverity(alert.severity);
                    return `
                        <div class="data-display">
                            <div class="data-label">
                                <span class="tag ${severityInfo.class}">${severityInfo.text}</span>
                                ${FormatUtils.formatAlertType(alert.type)}
                            </div>
                            <div class="data-value">
                                ${FormatUtils.formatDateTime(alert.createdAt, 'relative')}
                            </div>
                        </div>
                    `;
                }).join('');
            }

        } catch (error) {
            console.error('Âä†ËΩΩÊä•Ë≠¶‰ø°ÊÅØÂ§±Ë¥•:', error);
        }
    }

    /**
     * Âä†ËΩΩÂõæË°®Êï∞ÊçÆ
     */
    async loadChartData() {
        try {
            // ÁîüÊàêÊ®°ÊãüÁö?4Â∞èÊó∂Êï∞ÊçÆ
            const hours = 24;
            const temperatureData = [];
            const humidityData = [];
            
            for (let i = hours; i >= 0; i--) {
                const time = new Date(Date.now() - i * 60 * 60 * 1000);
                temperatureData.push({
                    time: time.getHours() + ':00',
                    value: 20 + Math.random() * 15
                });
                humidityData.push({
                    time: time.getHours() + ':00',
                    value: 40 + Math.random() * 40
                });
            }

            // ÁªòÂà∂Ê∏©Â∫¶ÂõæË°®
            this.drawLineChart('temperatureChart', temperatureData, '¬∞C');
            
            // ÁªòÂà∂ÊπøÂ∫¶ÂõæË°®
            this.drawLineChart('humidityChart', humidityData, '%');

        } catch (error) {
            console.error('Âä†ËΩΩÂõæË°®Êï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    /**
     * ÁªòÂà∂ÊäòÁ∫øÂõ?
     * @param {string} canvasId - CanvasÂÖÉÁ¥†ID
     * @param {Array} data - Êï∞ÊçÆÊï∞ÁªÑ
     * @param {string} unit - Âçï‰Ωç
     */
    drawLineChart(canvasId, data, unit) {
        const canvas = document.getElementById(canvasId);
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        const rect = canvas.getBoundingClientRect();
        
        // ËÆæÁΩÆcanvasÂÆûÈôÖÂ§ßÂ∞è
        canvas.width = rect.width;
        canvas.height = rect.height;

        // Ê∏ÖÁ©∫ÁîªÂ∏É
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        if (data.length === 0) return;

        // ËÆ°ÁÆóÊï∞ÊçÆËåÉÂõ¥
        const values = data.map(d => d.value);
        const minValue = Math.min(...values);
        const maxValue = Math.max(...values);
        const valueRange = maxValue - minValue || 1;

        // ËÆæÁΩÆÁªòÂõæÂå∫Âüü
        const padding = 40;
        const chartWidth = canvas.width - padding * 2;
        const chartHeight = canvas.height - padding * 2;

        // ÁªòÂà∂ÁΩëÊ†ºÁ∫?
        ctx.strokeStyle = '#E0E0E0';
        ctx.lineWidth = 1;
        
        // Ê∞¥Âπ≥ÁΩëÊ†ºÁ∫?
        for (let i = 0; i <= 5; i++) {
            const y = padding + (chartHeight / 5) * i;
            ctx.beginPath();
            ctx.moveTo(padding, y);
            ctx.lineTo(padding + chartWidth, y);
            ctx.stroke();
        }

        // ÂûÇÁõ¥ÁΩëÊ†ºÁ∫?
        const stepX = chartWidth / (data.length - 1);
        for (let i = 0; i < data.length; i += Math.ceil(data.length / 6)) {
            const x = padding + stepX * i;
            ctx.beginPath();
            ctx.moveTo(x, padding);
            ctx.lineTo(x, padding + chartHeight);
            ctx.stroke();
        }

        // ÁªòÂà∂Êï∞ÊçÆÁ∫?
        ctx.strokeStyle = '#2E7D32';
        ctx.lineWidth = 2;
        ctx.beginPath();

        data.forEach((point, index) => {
            const x = padding + (chartWidth / (data.length - 1)) * index;
            const y = padding + chartHeight - ((point.value - minValue) / valueRange) * chartHeight;
            
            if (index === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        });

        ctx.stroke();

        // ÁªòÂà∂Êï∞ÊçÆÁÇ?
        ctx.fillStyle = '#2E7D32';
        data.forEach((point, index) => {
            const x = padding + (chartWidth / (data.length - 1)) * index;
            const y = padding + chartHeight - ((point.value - minValue) / valueRange) * chartHeight;
            
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, 2 * Math.PI);
            ctx.fill();
        });
    }

    /**
     * Êõ¥Êñ∞ËøõÂ∫¶Êù?
     * @param {string} elementId - ËøõÂ∫¶Êù°ÂÖÉÁ¥†ID
     * @param {number} value - ÂΩìÂâçÂÄ?
     * @param {number} min - ÊúÄÂ∞èÂÄ?
     * @param {number} max - ÊúÄÂ§ßÂÄ?
     */
    updateProgressBar(elementId, value, min, max) {
        const element = document.getElementById(elementId);
        if (!element) return;

        const percentage = Math.min(100, Math.max(0, ((value - min) / (max - min)) * 100));
        element.style.width = `${percentage}%`;

        // Ê†πÊçÆÂÄºËÆæÁΩÆÈ¢úËâ?
        element.className = 'progress-fill';
        if (value < min * 1.1 || value > max * 0.9) {
            element.classList.add('warning');
        }
        if (value < min || value > max) {
            element.classList.add('danger');
        }
    }

    /**
     * Êõ¥Êñ∞Áä∂ÊÄÅÊòæÁ§?
     * @param {string} elementId - Áä∂ÊÄÅÂÖÉÁ¥†ID
     * @param {number} value - ÂΩìÂâçÂÄ?
     * @param {number} min - ÊúÄÂ∞èÂÄ?
     * @param {number} max - ÊúÄÂ§ßÂÄ?
     */
    updateStatus(elementId, value, min, max) {
        const element = document.getElementById(elementId);
        if (!element) return;

        if (value >= min && value <= max) {
            element.textContent = 'Ê≠£Â∏∏';
            element.className = 'data-status status-normal';
        } else if (value < min * 0.9 || value > max * 1.1) {
            element.textContent = 'ÂºÇÂ∏∏';
            element.className = 'data-status status-danger';
        } else {
            element.textContent = 'Ë≠¶Âëä';
            element.className = 'data-status status-warning';
        }
    }

    /**
     * Ëé∑ÂèñËÆæÂ§áÂõæÊ†á
     * @param {string} deviceType - ËÆæÂ§áÁ±ªÂûã
     * @returns {string} ÂõæÊ†áÂ≠óÁ¨¶
     */
    getDeviceIcon(deviceType) {
        const icons = {
            heater: 'üî•',
            cooler: '‚ùÑÔ∏è',
            humidifier: 'üíß',
            dehumidifier: 'üí®',
            fan: 'üåÄ',
            light: 'üí°',
            irrigation: 'üöø'
        };
        return icons[deviceType] || '‚öôÔ∏è';
    }

    /**
     * ÁªëÂÆö‰∫ã‰ª∂
     */
    bindEvents() {
        // ÂõæË°®Âë®ÊúüÂàáÊç¢
        document.querySelectorAll('.period-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const period = e.target.dataset.period;
                const container = e.target.closest('.chart-container');
                
                // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄ?
                container.querySelectorAll('.period-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                
                // ÈáçÊñ∞Âä†ËΩΩÂõæË°®Êï∞ÊçÆ
                this.loadChartData();
            });
        });
    }

    /**
     * ÂºÄÂßãËá™Âä®Âà∑Êñ?
     */
    startAutoRefresh() {
        this.refreshInterval = setInterval(() => {
            this.loadData();
        }, 30000); // 30ÁßíÂà∑Êñ∞‰∏ÄÊ¨?
    }

    /**
     * ÂÅúÊ≠¢Ëá™Âä®Âà∑Êñ∞
     */
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
    }

    /**
     * Âà∑Êñ∞ÁªÑ‰ª∂
     */
    async refresh() {
        await this.loadData();
    }

    /**
     * Á™óÂè£Â§ßÂ∞èÂèòÂåñÂ§ÑÁêÜ
     */
    onResize() {
        // ÈáçÊñ∞ÁªòÂà∂ÂõæË°®
        setTimeout(() => {
            this.loadChartData();
        }, 100);
    }

    /**
     * ÈîÄÊØÅÁªÑ‰ª?
     */
    destroy() {
        this.stopAutoRefresh();
    }
}
