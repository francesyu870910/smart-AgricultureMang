/**
 * Êô∫ËÉΩÊ∏©ÂÆ§ÁéØÂ¢ÉÁõëÊéßÁ≥ªÁªü - ÂéÜÂè≤ËÆ∞ÂΩïÁªÑ‰ª∂
 */

class HistoryComponent {
    constructor() {
        this.refreshInterval = null;
    }

    async render() {
        return `
            <div class="history-container">
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">ÂéÜÂè≤ËÆ∞ÂΩïÊ®°Âùó</h3>
                    </div>
                    <div class="card-body">
                        <p>ÂéÜÂè≤ËÆ∞ÂΩïÂäüËÉΩÊ≠£Âú®ÂºÄÂèë‰∏≠...</p>
                        <div class="data-display">
                            <div class="data-label">ËÆ∞ÂΩïÊÄªÊï∞</div>
                            <div class="data-value">25,678</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    async ini   <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">ÂéÜÂè≤Êï∞ÊçÆÊü•ËØ¢</h3>
                        <div class="card-actions">
                            <button class="btn btn-primary" onclick="historyComponent.exportData()">
                                üìä ÂØºÂá∫Êï∞ÊçÆ
                            </button>
                            <button class="btn btn-secondary" onclick="historyComponent.refresh()">
                                üîÑ Âà∑Êñ∞
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="filter-section">
                            <div class="grid grid-4">
                                <!-- Êó∂Èó¥ËåÉÂõ¥ÈÄâÊã© -->
                                <div class="form-group">
                                    <label class="form-label">Êó∂Èó¥ËåÉÂõ¥</label>
                                    <select class="form-select" id="dateRangeSelect" onchange="historyComponent.onFilterChange()">
                                        <option value="today">‰ªäÂ§©</option>
                                        <option value="yesterday">Êò®Â§©</option>
                                        <option value="week">ÊúÄËøë‰∏ÄÂë?/option>
                                        <option value="month">ÊúÄËøë‰∏ÄÊú?/option>
                                        <option value="custom">Ëá™ÂÆö‰π?/option>
                                    </select>
                                </div>
                                
                                <!-- Êï∞ÊçÆÁ±ªÂûãÁ≠õÈÄ?-->
                                <div class="form-group">
                                    <label class="form-label">Êï∞ÊçÆÁ±ªÂûã</label>
                                    <select class="form-select" id="dataTypeSelect" onchange="historyComponent.onFilterChange()">
                                        <option value="all">ÂÖ®ÈÉ®Êï∞ÊçÆ</option>
                                        <option value="temperature">Ê∏©Â∫¶</option>
                                        <option value="humidity">ÊπøÂ∫¶</option>
                                        <option value="light_intensity">ÂÖâÁÖßÂº∫Â∫¶</option>
                                        <option value="soil_humidity">ÂúüÂ£§ÊπøÂ∫¶</option>
                                        <option value="co2_level">CO2ÊµìÂ∫¶</option>
                                    </select>
                                </div>
                                
                                <!-- Êï∞ÂÄºËåÉÂõ?-->
                                <div class="form-group">
                                    <label class="form-label">ÊúÄÂ∞èÂÄ?/label>
                                    <input type="number" class="form-input" id="minValueInput" 
                                           placeholder="ÊúÄÂ∞èÂÄ? onchange="historyComponent.onFilterChange()">
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">ÊúÄÂ§ßÂÄ?/label>
                                    <input type="number" class="form-input" id="maxValueInput" 
                                           placeholder="ÊúÄÂ§ßÂÄ? onchange="historyComponent.onFilterChange()">
                                </div>
                            </div>
                            
                            <!-- Ëá™ÂÆö‰πâÊó•ÊúüËåÉÂõ?-->
                            <div id="customDateRange" class="grid grid-2" style="display: none; margin-top: 15px;">
                                <div class="form-group">
                                    <label class="form-label">ÂºÄÂßãÊó•Êú?/label>
                                    <input type="datetime-local" class="form-input" id="startDateInput" 
                                           onchange="historyComponent.onFilterChange()">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">ÁªìÊùüÊó•Êúü</label>
                                    <input type="datetime-local" class="form-input" id="endDateInput" 
                                           onchange="historyComponent.onFilterChange()">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Êï∞ÊçÆÁªüËÆ°Ê¶ÇËßà -->
                <div class="grid grid-4">
                    <div class="data-card">
                        <div class="card-body">
                            <div class="data-display">
                                <div class="data-label">ÊÄªËÆ∞ÂΩïÊï∞</div>
                                <div class="data-value" id="totalRecordsCount">--</div>
                            </div>
                        </div>
                    </div>
                    <div class="data-card">
                        <div class="card-body">
                            <div class="data-display">
                                <div class="data-label">Êó∂Èó¥Ë∑®Â∫¶</div>
                                <div class="data-value" id="timeSpanDisplay">--</div>
                            </div>
                        </div>
                    </div>
                    <div class="data-card">
                        <div class="card-body">
                            <div class="data-display">
                                <div class="data-label">Êï∞ÊçÆÂÆåÊï¥ÊÄ?/div>
                                <div class="data-value" id="dataIntegrityDisplay">--</div>
                            </div>
                        </div>
                    </div>
                    <div class="data-card">
                        <div class="card-body">
                            <div class="data-display">
                                <div class="data-label">ÂºÇÂ∏∏ËÆ∞ÂΩï</div>
                                <div class="data-value" id="anomalyCountDisplay">--</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- ÂéÜÂè≤Êï∞ÊçÆÂõæË°®Â±ïÁ§∫ -->
                <div class="data-card chart-card">
                    <div class="card-header">
                        <h3 class="card-title">ÂéÜÂè≤Êï∞ÊçÆË∂ãÂäøÂõ?/h3>
                        <div class="chart-controls">
                            <div class="period-buttons">
                                <button class="period-btn active" data-period="1h" onclick="historyComponent.changeChartPeriod('1h')">1Â∞èÊó∂</button>
                                <button class="period-btn" data-period="6h" onclick="historyComponent.changeChartPeriod('6h')">6Â∞èÊó∂</button>
                                <button class="period-btn" data-period="24h" onclick="historyComponent.changeChartPeriod('24h')">24Â∞èÊó∂</button>
                                <button class="period-btn" data-period="7d" onclick="historyComponent.changeChartPeriod('7d')">7Â§?/button>
                            </div>
                            <select class="form-select" id="chartDataTypeSelect" onchange="historyComponent.updateChart()">
                                <option value="temperature">Ê∏©Â∫¶</option>
                                <option value="humidity">ÊπøÂ∫¶</option>
                                <option value="light_intensity">ÂÖâÁÖßÂº∫Â∫¶</option>
                                <option value="soil_humidity">ÂúüÂ£§ÊπøÂ∫¶</option>
                                <option value="co2_level">CO2ÊµìÂ∫¶</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="chart-container">
                            <canvas id="historyChart" width="800" height="300"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Êï∞ÊçÆÂØπÊØîÂàÜÊûê -->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">Êï∞ÊçÆÂØπÊØîÂàÜÊûê</h3>
                        <div class="card-actions">
                            <button class="btn btn-secondary" onclick="historyComponent.showComparisonModal()">
                                üìà ËÆæÁΩÆÂØπÊØî
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="comparisonChartContainer" style="display: none;">
                            <div class="chart-container">
                                <canvas id="comparisonChart" width="800" height="300"></canvas>
                            </div>
                        </div>
                        <div id="comparisonPlaceholder" class="empty-state">
                            <div class="empty-state-icon">üìä</div>
                            <div class="empty-state-title">ÊöÇÊó†ÂØπÊØîÊï∞ÊçÆ</div>
                            <div class="empty-state-description">ÁÇπÂáª"ËÆæÁΩÆÂØπÊØî"ÊåâÈíÆÈÄâÊã©Ë¶ÅÂØπÊØîÁöÑÊó∂Èó¥ÊÆµÂíåÂèÇÊï∞</div>
                        </div>
                    </div>
                </div>

                <!-- ÂéÜÂè≤Êï∞ÊçÆË°®Ê†º -->
                <div class="data-card">
                    <div class="card-header">
                        <h3 class="card-title">ÂéÜÂè≤Êï∞ÊçÆËÆ∞ÂΩï</h3>
                        <div class="card-actions">
                            <select class="form-select" id="pageSizeSelect" onchange="historyComponent.changePageSize()">
                                <option value="10">10Êù?È°?/option>
                                <option value="20" selected>20Êù?È°?/option>
                                <option value="50">50Êù?È°?/option>
                                <option value="100">100Êù?È°?/option>
                            </select>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="historyTableContainer">
                            <div class="loading">
                                <div class="loading-spinner"></div>
                                <div>Ê≠£Âú®Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆ...</div>
                            </div>
                        </div>
                        
                        <!-- ÂàÜÈ°µÊéß‰ª∂ -->
                        <div class="pagination" id="historyPagination">
                            <button onclick="historyComponent.goToPage(1)" id="firstPageBtn">È¶ñÈ°µ</button>
                            <button onclick="historyComponent.goToPage(historyComponent.currentPage - 1)" id="prevPageBtn">‰∏ä‰∏ÄÈ°?/button>
                            <span id="pageInfo">Á¨?1 È°µÔºåÂÖ?1 È°?/span>
                            <button onclick="historyComponent.goToPage(historyComponent.currentPage + 1)" id="nextPageBtn">‰∏ã‰∏ÄÈ°?/button>
                            <button onclick="historyComponent.goToPage(historyComponent.totalPages)" id="lastPageBtn">Êú´È°µ</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Êï∞ÊçÆÂØπÊØîËÆæÁΩÆÊ®°ÊÄÅÊ°Ü -->
            <div id="comparisonModal" class="modal" style="display: none;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Êï∞ÊçÆÂØπÊØîËÆæÁΩÆ</h3>
                        <button class="btn-close" onclick="historyComponent.closeComparisonModal()">√ó</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label">ÂØπÊØîÂèÇÊï∞</label>
                            <select class="form-select" id="comparisonParameter">
                                <option value="temperature">Ê∏©Â∫¶</option>
                                <option value="humidity">ÊπøÂ∫¶</option>
                                <option value="light_intensity">ÂÖâÁÖßÂº∫Â∫¶</option>
                                <option value="soil_humidity">ÂúüÂ£§ÊπøÂ∫¶</option>
                                <option value="co2_level">CO2ÊµìÂ∫¶</option>
                            </select>
                        </div>
                        
                        <div class="grid grid-2">
                            <div class="form-group">
                                <label class="form-label">Á¨¨‰∏ÄÊó∂Èó¥ÊÆ?/label>
                                <select class="form-select" id="period1Select">
                                    <option value="today">‰ªäÂ§©</option>
                                    <option value="yesterday">Êò®Â§©</option>
                                    <option value="week">Êú¨Âë®</option>
                                    <option value="lastWeek">‰∏äÂë®</option>
                                    <option value="month">Êú¨Êúà</option>
                                    <option value="lastMonth">‰∏äÊúà</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Á¨¨‰∫åÊó∂Èó¥ÊÆ?/label>
                                <select class="form-select" id="period2Select">
                                    <option value="today">‰ªäÂ§©</option>
                                    <option value="yesterday" selected>Êò®Â§©</option>
                                    <option value="week">Êú¨Âë®</option>
                                    <option value="lastWeek">‰∏äÂë®</option>
                                    <option value="month">Êú¨Êúà</option>
                                    <option value="lastMonth">‰∏äÊúà</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="historyComponent.closeComparisonModal()">ÂèñÊ∂à</button>
                        <button class="btn btn-primary" onclick="historyComponent.generateComparison()">ÁîüÊàêÂØπÊØî</button>
                    </div>
                </div>
            </div>

            <!-- Êï∞ÊçÆÂØºÂá∫Ê®°ÊÄÅÊ°Ü -->
            <div id="exportModal" class="modal" style="display: none;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>Êï∞ÊçÆÂØºÂá∫ËÆæÁΩÆ</h3>
                        <button class="btn-close" onclick="historyComponent.closeExportModal()">√ó</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label">ÂØºÂá∫Ê†ºÂºè</label>
                            <select class="form-select" id="exportFormat">
                                <option value="csv">CSVÊ†ºÂºè</option>
                                <option value="excel">ExcelÊ†ºÂºè</option>
                                <option value="json">JSONÊ†ºÂºè</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">ÂØºÂá∫ËåÉÂõ¥</label>
                            <select class="form-select" id="exportRange">
                                <option value="current">ÂΩìÂâçÁ≠õÈÄâÁªìÊû?/option>
                                <option value="all">ÂÖ®ÈÉ®ÂéÜÂè≤Êï∞ÊçÆ</option>
                                <option value="custom">Ëá™ÂÆö‰πâËåÉÂõ?/option>
                            </select>
                        </div>
                        
                        <div id="customExportRange" style="display: none;">
                            <div class="grid grid-2">
                                <div class="form-group">
                                    <label class="form-label">ÂºÄÂßãÊó∂Èó?/label>
                                    <input type="datetime-local" class="form-input" id="exportStartDate">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">ÁªìÊùüÊó∂Èó¥</label>
                                    <input type="datetime-local" class="form-input" id="exportEndDate">
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">ÂåÖÂê´Â≠óÊÆµ</label>
                            <div class="grid grid-2">
                                <label><input type="checkbox" checked id="includeTemperature"> Ê∏©Â∫¶</label>
                                <label><input type="checkbox" checked id="includeHumidity"> ÊπøÂ∫¶</label>
                                <label><input type="checkbox" checked id="includeLightIntensity"> ÂÖâÁÖßÂº∫Â∫¶</label>
                                <label><input type="checkbox" checked id="includeSoilHumidity"> ÂúüÂ£§ÊπøÂ∫¶</label>
                                <label><input type="checkbox" checked id="includeCO2Level"> CO2ÊµìÂ∫¶</label>
                                <label><input type="checkbox" checked id="includeTimestamp"> ËÆ∞ÂΩïÊó∂Èó¥</label>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" onclick="historyComponent.closeExportModal()">ÂèñÊ∂à</button>
                        <button class="btn btn-primary" onclick="historyComponent.performExport()">ÂºÄÂßãÂØºÂá?/button>
                    </div>
                </div>
            </div>
        `;
    }    async in
it() {
        console.log('ÂéÜÂè≤ËÆ∞ÂΩïÁªÑ‰ª∂Â∑≤ÂàùÂßãÂåñ');
        
        // ÂàùÂßãÂåñÊó•ÊúüËåÉÂõ?
        this.initializeDateRange();
        
        // Âä†ËΩΩÂàùÂßãÊï∞ÊçÆ
        await this.loadHistoryData();
        
        // Âä†ËΩΩÂõæË°®Êï∞ÊçÆ
        await this.loadChartData();
        
        // ËÆæÁΩÆËá™Âä®Âà∑Êñ∞
        this.startAutoRefresh();
        
        // ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô?
        this.bindEventListeners();
    }

    /**
     * ÂàùÂßãÂåñÊó•ÊúüËåÉÂõ?
     */
    initializeDateRange() {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        
        // ËÆæÁΩÆÈªòËÆ§ÁöÑÂºÄÂßãÂíåÁªìÊùüÊó∂Èó¥
        document.getElementById('startDateInput').value = this.formatDateTimeLocal(today);
        document.getElementById('endDateInput').value = this.formatDateTimeLocal(now);
    }

    /**
     * Ê†ºÂºèÂåñÊó•ÊúüÊó∂Èó¥‰∏∫Êú¨Âú∞ËæìÂÖ•Ê†ºÂºè
     */
    formatDateTimeLocal(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        
        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }

    /**
     * ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô?
     */
    bindEventListeners() {
        // ÁõëÂê¨ÂØºÂá∫ËåÉÂõ¥ÂèòÂåñ
        const exportRangeSelect = document.getElementById('exportRange');
        if (exportRangeSelect) {
            exportRangeSelect.addEventListener('change', (e) => {
                const customRange = document.getElementById('customExportRange');
                if (customRange) {
                    customRange.style.display = e.target.value === 'custom' ? 'block' : 'none';
                }
            });
        }

        // ÁõëÂê¨Êó•ÊúüËåÉÂõ¥ÈÄâÊã©ÂèòÂåñ
        const dateRangeSelect = document.getElementById('dateRangeSelect');
        if (dateRangeSelect) {
            dateRangeSelect.addEventListener('change', (e) => {
                const customRange = document.getElementById('customDateRange');
                if (customRange) {
                    customRange.style.display = e.target.value === 'custom' ? 'block' : 'none';
                }
            });
        }
    }

    /**
     * Á≠õÈÄâÊù°‰ª∂ÂèòÂåñÂ§ÑÁê?
     */
    async onFilterChange() {
        // Êõ¥Êñ∞Á≠õÈÄâÊù°‰ª?
        this.updateFilters();
        
        // ÈáçÁΩÆÂà∞Á¨¨‰∏ÄÈ°?
        this.currentPage = 1;
        
        // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
        await this.loadHistoryData();
        
        // Êõ¥Êñ∞ÂõæË°®
        await this.loadChartData();
    }

    /**
     * Êõ¥Êñ∞Á≠õÈÄâÊù°‰ª?
     */
    updateFilters() {
        this.filters.dateRange = document.getElementById('dateRangeSelect').value;
        this.filters.dataType = document.getElementById('dataTypeSelect').value;
        this.filters.minValue = document.getElementById('minValueInput').value;
        this.filters.maxValue = document.getElementById('maxValueInput').value;
        
        if (this.filters.dateRange === 'custom') {
            this.filters.startDate = document.getElementById('startDateInput').value;
            this.filters.endDate = document.getElementById('endDateInput').value;
        } else {
            // Ê†πÊçÆÈ¢ÑËÆæËåÉÂõ¥ËÆ°ÁÆóÊó•Êúü
            const dateRange = this.calculateDateRange(this.filters.dateRange);
            this.filters.startDate = dateRange.start;
            this.filters.endDate = dateRange.end;
        }
    }

    /**
     * ËÆ°ÁÆóÈ¢ÑËÆæÊó•ÊúüËåÉÂõ¥
     */
    calculateDateRange(range) {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        
        switch (range) {
            case 'today':
                return {
                    start: this.formatDateTimeLocal(today),
                    end: this.formatDateTimeLocal(now)
                };
            case 'yesterday':
                const yesterday = new Date(today);
                yesterday.setDate(yesterday.getDate() - 1);
                const yesterdayEnd = new Date(yesterday);
                yesterdayEnd.setHours(23, 59, 59);
                return {
                    start: this.formatDateTimeLocal(yesterday),
                    end: this.formatDateTimeLocal(yesterdayEnd)
                };
            case 'week':
                const weekStart = new Date(today);
                weekStart.setDate(weekStart.getDate() - 7);
                return {
                    start: this.formatDateTimeLocal(weekStart),
                    end: this.formatDateTimeLocal(now)
                };
            case 'month':
                const monthStart = new Date(today);
                monthStart.setDate(monthStart.getDate() - 30);
                return {
                    start: this.formatDateTimeLocal(monthStart),
                    end: this.formatDateTimeLocal(now)
                };
            default:
                return {
                    start: this.formatDateTimeLocal(today),
                    end: this.formatDateTimeLocal(now)
                };
        }
    }

    /**
     * Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆ
     */
    async loadHistoryData() {
        try {
            // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄ?
            this.showTableLoading();
            
            // ÊûÑÂª∫Êü•ËØ¢ÂèÇÊï∞
            const params = {
                page: this.currentPage,
                pageSize: this.pageSize,
                startDate: this.filters.startDate,
                endDate: this.filters.endDate,
                dataType: this.filters.dataType,
                minValue: this.filters.minValue,
                maxValue: this.filters.maxValue,
                sortBy: this.sortBy,
                sortOrder: this.sortOrder
            };

            // Ë∞ÉÁî®APIËé∑ÂèñÊï∞ÊçÆ
            const response = await apiService.getHistoryData(params);
            
            if (response.success) {
                this.totalRecords = response.data.total;
                this.totalPages = Math.ceil(this.totalRecords / this.pageSize);
                
                // Ê∏≤ÊüìÊï∞ÊçÆË°®Ê†º
                this.renderHistoryTable(response.data.records);
                
                // Êõ¥Êñ∞ÂàÜÈ°µÊéß‰ª∂
                this.updatePagination();
                
                // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
                this.updateStatistics(response.data.statistics);
            } else {
                this.showTableError('Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆÂ§±Ë¥•');
            }
        } catch (error) {
            console.error('Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆÂ§±Ë¥•:', error);
            this.showTableError('ÁΩëÁªúÈîôËØØÔºåËØ∑Á®çÂêéÈáçËØï');
        }
    }

    /**
     * ÊòæÁ§∫Ë°®Ê†ºÂä†ËΩΩÁä∂ÊÄ?
     */
    showTableLoading() {
        const container = document.getElementById('historyTableContainer');
        if (container) {
            container.innerHTML = `
                <div class="loading">
                    <div class="loading-spinner"></div>
                    <div>Ê≠£Âú®Âä†ËΩΩÂéÜÂè≤Êï∞ÊçÆ...</div>
                </div>
            `;
        }
    }

    /**
     * ÊòæÁ§∫Ë°®Ê†ºÈîôËØØÁä∂ÊÄ?
     */
    showTableError(message) {
        const container = document.getElementById('historyTableContainer');
        if (container) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">‚ö†Ô∏è</div>
                    <div class="empty-state-title">Âä†ËΩΩÂ§±Ë¥•</div>
                    <div class="empty-state-description">${message}</div>
                    <button class="btn btn-primary" onclick="historyComponent.loadHistoryData()">ÈáçËØï</button>
                </div>
            `;
        }
    }

    /**
     * Ê∏≤ÊüìÂéÜÂè≤Êï∞ÊçÆË°®Ê†º
     */
    renderHistoryTable(records) {
        const container = document.getElementById('historyTableContainer');
        if (!container) return;

        if (!records || records.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìä</div>
                    <div class="empty-state-title">ÊöÇÊó†Êï∞ÊçÆ</div>
                    <div class="empty-state-description">ÂΩìÂâçÁ≠õÈÄâÊù°‰ª∂‰∏ãÊ≤°ÊúâÊâæÂà∞ÂéÜÂè≤ËÆ∞ÂΩï</div>
                </div>
            `;
            return;
        }

        const tableHtml = `
            <table class="data-table">
                <thead>
                    <tr>
                        <th onclick="historyComponent.sortBy('recorded_at')">
                            ËÆ∞ÂΩïÊó∂Èó¥ ${this.getSortIcon('recorded_at')}
                        </th>
                        <th onclick="historyComponent.sortBy('temperature')">
                            Ê∏©Â∫¶(¬∞C) ${this.getSortIcon('temperature')}
                        </th>
                        <th onclick="historyComponent.sortBy('humidity')">
                            ÊπøÂ∫¶(%) ${this.getSortIcon('humidity')}
                        </th>
                        <th onclick="historyComponent.sortBy('light_intensity')">
                            ÂÖâÁÖßÂº∫Â∫¶(lux) ${this.getSortIcon('light_intensity')}
                        </th>
                        <th onclick="historyComponent.sortBy('soil_humidity')">
                            ÂúüÂ£§ÊπøÂ∫¶(%) ${this.getSortIcon('soil_humidity')}
                        </th>
                        <th onclick="historyComponent.sortBy('co2_level')">
                            CO2ÊµìÂ∫¶(ppm) ${this.getSortIcon('co2_level')}
                        </th>
                        <th>Áä∂ÊÄ?/th>
                    </tr>
                </thead>
                <tbody>
                    ${records.map(record => this.renderTableRow(record)).join('')}
                </tbody>
            </table>
        `;

        container.innerHTML = tableHtml;
    }

    /**
     * Ê∏≤ÊüìË°®Ê†ºË°?
     */
    renderTableRow(record) {
        const isAnomalous = this.checkAnomalousData(record);
        const statusClass = isAnomalous ? 'status-warning' : 'status-normal';
        const statusText = isAnomalous ? 'ÂºÇÂ∏∏' : 'Ê≠£Â∏∏';

        return `
            <tr class="${isAnomalous ? 'anomalous-row' : ''}">
                <td>${formatUtils.formatDateTime(record.recorded_at, 'full')}</td>
                <td>${formatUtils.formatTemperature(record.temperature)}</td>
                <td>${formatUtils.formatHumidity(record.humidity)}</td>
                <td>${formatUtils.formatLightIntensity(record.light_intensity)}</td>
                <td>${formatUtils.formatHumidity(record.soil_humidity)}</td>
                <td>${formatUtils.formatCO2Level(record.co2_level)}</td>
                <td><span class="data-status ${statusClass}">${statusText}</span></td>
            </tr>
        `;
    }

    /**
     * Ê£ÄÊü•Êï∞ÊçÆÊòØÂê¶ÂºÇÂ∏?
     */
    checkAnomalousData(record) {
        // ÁÆÄÂçïÁöÑÂºÇÂ∏∏Ê£ÄÊµãÈÄªËæë
        return (
            record.temperature < 10 || record.temperature > 40 ||
            record.humidity < 20 || record.humidity > 90 ||
            record.light_intensity < 100 || record.light_intensity > 5000 ||
            record.soil_humidity < 10 || record.soil_humidity > 80 ||
            record.co2_level < 300 || record.co2_level > 1000
        );
    }

    /**
     * Ëé∑ÂèñÊéíÂ∫èÂõæÊ†á
     */
    getSortIcon(field) {
        if (this.sortBy !== field) return '‚ÜïÔ∏è';
        return this.sortOrder === 'asc' ? '‚Ü? : '‚Ü?;
    }

    /**
     * ÊéíÂ∫èÂ§ÑÁêÜ
     */
    async sortBy(field) {
        if (this.sortBy === field) {
            this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';
        } else {
            this.sortBy = field;
            this.sortOrder = 'desc';
        }
        
        await this.loadHistoryData();
    }

    /**
     * Êõ¥Êñ∞ÂàÜÈ°µÊéß‰ª∂
     */
    updatePagination() {
        const pageInfo = document.getElementById('pageInfo');
        const firstPageBtn = document.getElementById('firstPageBtn');
        const prevPageBtn = document.getElementById('prevPageBtn');
        const nextPageBtn = document.getElementById('nextPageBtn');
        const lastPageBtn = document.getElementById('lastPageBtn');

        if (pageInfo) {
            pageInfo.textContent = `Á¨?${this.currentPage} È°µÔºåÂÖ?${this.totalPages} È°?(ÊÄªËÆ° ${this.totalRecords} Êù°ËÆ∞ÂΩ?`;
        }

        if (firstPageBtn) firstPageBtn.disabled = this.currentPage === 1;
        if (prevPageBtn) prevPageBtn.disabled = this.currentPage === 1;
        if (nextPageBtn) nextPageBtn.disabled = this.currentPage === this.totalPages;
        if (lastPageBtn) lastPageBtn.disabled = this.currentPage === this.totalPages;
    }

    /**
     * Ë∑≥ËΩ¨Âà∞ÊåáÂÆöÈ°µÈù?
     */
    async goToPage(page) {
        if (page < 1 || page > this.totalPages) return;
        
        this.currentPage = page;
        await this.loadHistoryData();
    }

    /**
     * ÊîπÂèòÊØèÈ°µÊòæÁ§∫Êï∞Èáè
     */
    async changePageSize() {
        const pageSizeSelect = document.getElementById('pageSizeSelect');
        if (pageSizeSelect) {
            this.pageSize = parseInt(pageSizeSelect.value);
            this.currentPage = 1;
            await this.loadHistoryData();
        }
    }

    /**
     * Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
     */
    updateStatistics(statistics) {
        // Êõ¥Êñ∞ÊÄªËÆ∞ÂΩïÊï∞
        const totalRecordsElement = document.getElementById('totalRecordsCount');
        if (totalRecordsElement) {
            totalRecordsElement.textContent = formatUtils.formatNumber(statistics.totalRecords, 0);
        }

        // Êõ¥Êñ∞Êó∂Èó¥Ë∑®Â∫¶
        const timeSpanElement = document.getElementById('timeSpanDisplay');
        if (timeSpanElement && statistics.timeSpan) {
            timeSpanElement.textContent = formatUtils.formatDuration(statistics.timeSpan);
        }

        // Êõ¥Êñ∞Êï∞ÊçÆÂÆåÊï¥ÊÄ?
        const dataIntegrityElement = document.getElementById('dataIntegrityDisplay');
        if (dataIntegrityElement && statistics.dataIntegrity !== undefined) {
            dataIntegrityElement.textContent = formatUtils.formatPercentage(statistics.dataIntegrity, 100);
        }

        // Êõ¥Êñ∞ÂºÇÂ∏∏ËÆ∞ÂΩïÊï?
        const anomalyCountElement = document.getElementById('anomalyCountDisplay');
        if (anomalyCountElement) {
            anomalyCountElement.textContent = formatUtils.formatNumber(statistics.anomalyCount || 0, 0);
        }
    }

    /**
     * Âä†ËΩΩÂõæË°®Êï∞ÊçÆ
     */
    async loadChartData() {
        try {
            const params = {
                startDate: this.filters.startDate,
                endDate: this.filters.endDate,
                dataType: document.getElementById('chartDataTypeSelect')?.value || 'temperature',
                period: document.querySelector('.period-btn.active')?.dataset.period || '24h'
            };

            // Ê®°ÊãüÂõæË°®Êï∞ÊçÆ
            this.chartData = this.generateMockChartData(params);
            this.updateChart();
        } catch (error) {
            console.error('Âä†ËΩΩÂõæË°®Êï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    /**
     * ÁîüÊàêÊ®°ÊãüÂõæË°®Êï∞ÊçÆ
     */
    generateMockChartData(params) {
        const dataPoints = params.period === '1h' ? 12 : 
                          params.period === '6h' ? 24 : 
                          params.period === '24h' ? 24 : 30;
        
        const baseValue = params.dataType === 'temperature' ? 25 :
                         params.dataType === 'humidity' ? 60 :
                         params.dataType === 'light_intensity' ? 1500 :
                         params.dataType === 'soil_humidity' ? 45 :
                         params.dataType === 'co2_level' ? 450 : 25;
        
        const variation = params.dataType === 'temperature' ? 8 :
                         params.dataType === 'humidity' ? 20 :
                         params.dataType === 'light_intensity' ? 800 :
                         params.dataType === 'soil_humidity' ? 15 :
                         params.dataType === 'co2_level' ? 100 : 8;

        return Array.from({length: dataPoints}, (_, i) => {
            const timeOffset = params.period === '1h' ? i * 5 * 60 * 1000 :
                              params.period === '6h' ? i * 15 * 60 * 1000 :
                              params.period === '24h' ? i * 60 * 60 * 1000 :
                              i * 24 * 60 * 60 * 1000;
            
            return {
                time: new Date(Date.now() - (dataPoints - 1 - i) * timeOffset).toISOString(),
                value: baseValue + (Math.random() - 0.5) * variation
            };
        });
    }

    /**
     * Êõ¥Êñ∞ÂõæË°®
     */
    updateChart() {
        if (!this.chartData || this.chartData.length === 0) return;

        const dataType = document.getElementById('chartDataTypeSelect')?.value || 'temperature';
        const unit = this.getDataUnit(dataType);
        
        ChartUtils.drawLineChart('historyChart', this.chartData, {
            lineColor: '#2E7D32',
            pointColor: '#2E7D32',
            showGrid: true,
            showPoints: true,
            title: `${this.getDataTypeName(dataType)}ÂéÜÂè≤Ë∂ãÂäø`,
            unit: unit
        });
    }

    /**
     * Ëé∑ÂèñÊï∞ÊçÆÁ±ªÂûãÂêçÁß∞
     */
    getDataTypeName(dataType) {
        const names = {
            temperature: 'Ê∏©Â∫¶',
            humidity: 'ÊπøÂ∫¶',
            light_intensity: 'ÂÖâÁÖßÂº∫Â∫¶',
            soil_humidity: 'ÂúüÂ£§ÊπøÂ∫¶',
            co2_level: 'CO2ÊµìÂ∫¶'
        };
        return names[dataType] || dataType;
    }

    /**
     * Ëé∑ÂèñÊï∞ÊçÆÂçï‰Ωç
     */
    getDataUnit(dataType) {
        const units = {
            temperature: '¬∞C',
            humidity: '%',
            light_intensity: 'lux',
            soil_humidity: '%',
            co2_level: 'ppm'
        };
        return units[dataType] || '';
    }

    /**
     * ÊîπÂèòÂõæË°®Êó∂Èó¥Âë®Êúü
     */
    async changeChartPeriod(period) {
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄ?
        document.querySelectorAll('.period-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-period="${period}"]`)?.classList.add('active');

        // ÈáçÊñ∞Âä†ËΩΩÂõæË°®Êï∞ÊçÆ
        await this.loadChartData();
    }

    /**
     * ÊòæÁ§∫Êï∞ÊçÆÂØπÊØîÊ®°ÊÄÅÊ°Ü
     */
    showComparisonModal() {
        const modal = document.getElementById('comparisonModal');
        if (modal) {
            modal.style.display = 'flex';
        }
    }

    /**
     * ÂÖ≥Èó≠Êï∞ÊçÆÂØπÊØîÊ®°ÊÄÅÊ°Ü
     */
    closeComparisonModal() {
        const modal = document.getElementById('comparisonModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    /**
     * ÁîüÊàêÊï∞ÊçÆÂØπÊØî
     */
    async generateComparison() {
        try {
            const parameter = document.getElementById('comparisonParameter').value;
            const period1 = document.getElementById('period1Select').value;
            const period2 = document.getElementById('period2Select').value;

            // ÁîüÊàêÂØπÊØîÊï∞ÊçÆ
            this.comparisonData = this.generateMockComparisonData(parameter, period1, period2);
            
            // ÊòæÁ§∫ÂØπÊØîÂõæË°®
            this.showComparisonChart();
            
            // ÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
            this.closeComparisonModal();
            
            notificationUtils.success('Êï∞ÊçÆÂØπÊØîÁîüÊàêÊàêÂäü');
        } catch (error) {
            console.error('ÁîüÊàêÊï∞ÊçÆÂØπÊØîÂ§±Ë¥•:', error);
            notificationUtils.error('ÁîüÊàêÊï∞ÊçÆÂØπÊØîÂ§±Ë¥•');
        }
    }

    /**
     * ÁîüÊàêÊ®°ÊãüÂØπÊØîÊï∞ÊçÆ
     */
    generateMockComparisonData(parameter, period1, period2) {
        const dataPoints = 24;
        const baseValue = parameter === 'temperature' ? 25 :
                         parameter === 'humidity' ? 60 :
                         parameter === 'light_intensity' ? 1500 :
                         parameter === 'soil_humidity' ? 45 :
                         parameter === 'co2_level' ? 450 : 25;
        
        const variation = parameter === 'temperature' ? 6 :
                         parameter === 'humidity' ? 15 :
                         parameter === 'light_intensity' ? 600 :
                         parameter === 'soil_humidity' ? 12 :
                         parameter === 'co2_level' ? 80 : 6;

        const period1Data = Array.from({length: dataPoints}, (_, i) => ({
            time: `${String(i).padStart(2, '0')}:00`,
            value: baseValue + (Math.random() - 0.5) * variation
        }));

        const period2Data = Array.from({length: dataPoints}, (_, i) => ({
            time: `${String(i).padStart(2, '0')}:00`,
            value: baseValue + (Math.random() - 0.5) * variation + (Math.random() - 0.5) * 3
        }));

        return {
            parameter,
            period1: { name: this.getPeriodName(period1), data: period1Data },
            period2: { name: this.getPeriodName(period2), data: period2Data }
        };
    }

    /**
     * Ëé∑ÂèñÊó∂Èó¥ÊÆµÂêçÁß?
     */
    getPeriodName(period) {
        const names = {
            today: '‰ªäÂ§©',
            yesterday: 'Êò®Â§©',
            week: 'Êú¨Âë®',
            lastWeek: '‰∏äÂë®',
            month: 'Êú¨Êúà',
            lastMonth: '‰∏äÊúà'
        };
        return names[period] || period;
    }

    /**
     * ÊòæÁ§∫ÂØπÊØîÂõæË°®
     */
    showComparisonChart() {
        const container = document.getElementById('comparisonChartContainer');
        const placeholder = document.getElementById('comparisonPlaceholder');
        
        if (container && placeholder) {
            container.style.display = 'block';
            placeholder.style.display = 'none';
            
            // ÁªòÂà∂ÂØπÊØîÂõæË°®
            this.drawComparisonChart();
        }
    }

    /**
     * ÁªòÂà∂ÂØπÊØîÂõæË°®
     */
    drawComparisonChart() {
        const canvas = document.getElementById('comparisonChart');
        if (!canvas || !this.comparisonData) return;

        const ctx = canvas.getContext('2d');
        const rect = canvas.getBoundingClientRect();
        
        canvas.width = rect.width;
        canvas.height = rect.height;

        // Ê∏ÖÁ©∫ÁîªÂ∏É
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        const padding = 50;
        const chartWidth = canvas.width - padding * 2;
        const chartHeight = canvas.height - padding * 2;

        // Ëé∑ÂèñÊï∞ÊçÆËåÉÂõ¥
        const allValues = [
            ...this.comparisonData.period1.data.map(d => d.value),
            ...this.comparisonData.period2.data.map(d => d.value)
        ];
        const minValue = Math.min(...allValues);
        const maxValue = Math.max(...allValues);
        const valueRange = maxValue - minValue || 1;

        // ÁªòÂà∂ÁΩëÊ†º
        this.drawComparisonGrid(ctx, padding, chartWidth, chartHeight);

        // ÁªòÂà∂‰∏§Êù°Êï∞ÊçÆÁ∫?
        this.drawComparisonLine(ctx, this.comparisonData.period1.data, padding, chartWidth, chartHeight, minValue, valueRange, '#2E7D32');
        this.drawComparisonLine(ctx, this.comparisonData.period2.data, padding, chartWidth, chartHeight, minValue, valueRange, '#FF9800');

        // ÁªòÂà∂Âõæ‰æã
        this.drawComparisonLegend(ctx, canvas.width, padding);
    }

    /**
     * ÁªòÂà∂ÂØπÊØîÂõæË°®ÁΩëÊ†º
     */
    drawComparisonGrid(ctx, padding, chartWidth, chartHeight) {
        ctx.strokeStyle = '#E0E0E0';
        ctx.lineWidth = 1;
        
        // Ê∞¥Âπ≥ÁΩëÊ†ºÁ∫?
        for (let i = 0; i <= 5; i++) {
            const y = padding + (chartHeight / 5) * i;
            ctx.beginPath();
            ctx.moveTo(padding, y);
            ctx.lineTo(padding + chartWidth, y);
            ctx.stroke();
        }

        // ÂûÇÁõ¥ÁΩëÊ†ºÁ∫?
        for (let i = 0; i <= 6; i++) {
            const x = padding + (chartWidth / 6) * i;
            ctx.beginPath();
            ctx.moveTo(x, padding);
            ctx.lineTo(x, padding + chartHeight);
            ctx.stroke();
        }
    }

    /**
     * ÁªòÂà∂ÂØπÊØîÊï∞ÊçÆÁ∫?
     */
    drawComparisonLine(ctx, data, padding, chartWidth, chartHeight, minValue, valueRange, color) {
        ctx.strokeStyle = color;
        ctx.lineWidth = 2;
        ctx.beginPath();

        data.forEach((point, index) => {
            const x = padding + (chartWidth / (data.length - 1)) * index;
            const y = padding + chartHeight - ((point.value - minValue) / valueRange) * chartHeight;
            
            if (index === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        });

        ctx.stroke();
    }

    /**
     * ÁªòÂà∂ÂØπÊØîÂõæË°®Âõæ‰æã
     */
    drawComparisonLegend(ctx, canvasWidth, padding) {
        const legendY = padding - 20;
        
        // Á¨¨‰∏ÄÊù°Á∫øÂõæ‰æã
        ctx.fillStyle = '#2E7D32';
        ctx.fillRect(canvasWidth - 200, legendY, 15, 3);
        ctx.fillStyle = '#333';
        ctx.font = '12px Arial';
        ctx.fillText(this.comparisonData.period1.name, canvasWidth - 180, legendY + 10);
        
        // Á¨¨‰∫åÊù°Á∫øÂõæ‰æã
        ctx.fillStyle = '#FF9800';
        ctx.fillRect(canvasWidth - 100, legendY, 15, 3);
        ctx.fillStyle = '#333';
        ctx.fillText(this.comparisonData.period2.name, canvasWidth - 80, legendY + 10);
    }

    /**
     * ÊòæÁ§∫Êï∞ÊçÆÂØºÂá∫Ê®°ÊÄÅÊ°Ü
     */
    exportData() {
        const modal = document.getElementById('exportModal');
        if (modal) {
            modal.style.display = 'flex';
        }
    }

    /**
     * ÂÖ≥Èó≠Êï∞ÊçÆÂØºÂá∫Ê®°ÊÄÅÊ°Ü
     */
    closeExportModal() {
        const modal = document.getElementById('exportModal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    /**
     * ÊâßË°åÊï∞ÊçÆÂØºÂá∫
     */
    async performExport() {
        try {
            const format = document.getElementById('exportFormat').value;
            const range = document.getElementById('exportRange').value;
            
            // Êî∂ÈõÜÂØºÂá∫ÂèÇÊï∞
            const exportParams = {
                format: format,
                range: range,
                fields: this.getSelectedFields()
            };

            if (range === 'custom') {
                exportParams.startDate = document.getElementById('exportStartDate').value;
                exportParams.endDate = document.getElementById('exportEndDate').value;
            } else if (range === 'current') {
                exportParams.startDate = this.filters.startDate;
                exportParams.endDate = this.filters.endDate;
                exportParams.dataType = this.filters.dataType;
                exportParams.minValue = this.filters.minValue;
                exportParams.maxValue = this.filters.maxValue;
            }

            // Ë∞ÉÁî®ÂØºÂá∫API
            const response = await apiService.exportHistoryData(exportParams);
            
            if (response.success) {
                // ÂàõÂª∫‰∏ãËΩΩÈìæÊé•
                this.downloadExportedFile(response.data.downloadUrl, response.data.filename);
                notificationUtils.success('Êï∞ÊçÆÂØºÂá∫ÊàêÂäü');
                this.closeExportModal();
            } else {
                notificationUtils.error('Êï∞ÊçÆÂØºÂá∫Â§±Ë¥•');
            }
        } catch (error) {
            console.error('Êï∞ÊçÆÂØºÂá∫Â§±Ë¥•:', error);
            notificationUtils.error('Êï∞ÊçÆÂØºÂá∫Â§±Ë¥•');
        }
    }

    /**
     * Ëé∑ÂèñÈÄâ‰∏≠ÁöÑÂØºÂá∫Â≠óÊÆ?
     */
    getSelectedFields() {
        const fields = [];
        
        if (document.getElementById('includeTemperature').checked) fields.push('temperature');
        if (document.getElementById('includeHumidity').checked) fields.push('humidity');
        if (document.getElementById('includeLightIntensity').checked) fields.push('light_intensity');
        if (document.getElementById('includeSoilHumidity').checked) fields.push('soil_humidity');
        if (document.getElementById('includeCO2Level').checked) fields.push('co2_level');
        if (document.getElementById('includeTimestamp').checked) fields.push('recorded_at');
        
        return fields;
    }

    /**
     * ‰∏ãËΩΩÂØºÂá∫ÁöÑÊñá‰ª?
     */
    downloadExportedFile(url, filename) {
        // Ê®°ÊãüÊñá‰ª∂‰∏ãËΩΩ
        const link = document.createElement('a');
        link.href = url || '#';
        link.download = filename || `ÂéÜÂè≤Êï∞ÊçÆ_${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    /**
     * ÂºÄÂßãËá™Âä®Âà∑Êñ?
     */
    startAutoRefresh() {
        // ÊØ?ÂàÜÈíüËá™Âä®Âà∑Êñ∞‰∏ÄÊ¨°Êï∞Êç?
        this.refreshInterval = setInterval(() => {
            this.refresh();
        }, 5 * 60 * 1000);
    }

    /**
     * Âà∑Êñ∞Êï∞ÊçÆ
     */
    async refresh() {
        console.log('Âà∑Êñ∞ÂéÜÂè≤Êï∞ÊçÆ');
        await this.loadHistoryData();
        await this.loadChartData();
        notificationUtils.info('ÂéÜÂè≤Êï∞ÊçÆÂ∑≤Âà∑Êñ?);
    }

    /**
     * ÈîÄÊØÅÁªÑ‰ª?
     */
    destroy() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
        
        // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô?
        this.unbindEventListeners();
        
        console.log('ÂéÜÂè≤ËÆ∞ÂΩïÁªÑ‰ª∂Â∑≤ÈîÄÊØ?);
    }

    /**
     * Ëß£Áªë‰∫ã‰ª∂ÁõëÂê¨Âô?
     */
    unbindEventListeners() {
        // ÁßªÈô§‰∫ã‰ª∂ÁõëÂê¨Âô?
        const exportRangeSelect = document.getElementById('exportRange');
        if (exportRangeSelect) {
            exportRangeSelect.removeEventListener('change', this.handleExportRangeChange);
        }

        const dateRangeSelect = document.getElementById('dateRangeSelect');
        if (dateRangeSelect) {
            dateRangeSelect.removeEventListener('change', this.handleDateRangeChange);
        }
    }
}

